{
    "title":"How-to-Learn-React JS",
    "author":"Faizan Malik",
    "content": "<p>How to programmatically navigate with React Router v6 and the new&nbsp;<code>useNavigate<\/code>&nbsp;hook.<\/p>\r\n\r\n<p>To&nbsp;<em>programmatically<\/em>&nbsp;navigate means to use JavaScript, i.e.&nbsp;<em>program code<\/em>, a function or method call. If you just want a straight-up hyperlink then your best bet is&nbsp;<code>&lt;Link to=&quot;\/some-url&quot; \/&gt;<\/code>, otherwise here we go&hellip;<\/p>\r\n\r\n<p>This post will answer questions like &ldquo;How can I navigate on a click event in React?&rdquo; or &ldquo;What do I use to navigate to another URL inside a React component?&rdquo;.<\/p>\r\n\r\n<p>Assuming you&rsquo;re working in the DOM, you&rsquo;ll want to ensure you&rsquo;ve installed&nbsp;<code>npm install react-router-dom<\/code>&nbsp;- I&rsquo;m using React Router&nbsp;<code>6.4.3<\/code>&nbsp;and React&nbsp;<code>18.0.2<\/code>.<\/p>\r\n\r\n<p>Let&rsquo;s get React Router setup, I&rsquo;m importing components&nbsp;<code>Hello<\/code>&nbsp;and&nbsp;<code>Goodbye<\/code>&nbsp;to demonstrate how to handle navigating with hooks.<\/p>\r\n\r\n<pre>\r\n<code>import * as React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nimport Hello from '.\/Hello';\r\nimport Goodbye from '.\/Goodbye';\r\n\r\nconst App = () =&gt; (\r\n  &lt;Router&gt;\r\n    &lt;Routes&gt;\r\n      &lt;Route exact path=\"\/\" element={&lt;Hello \/&gt;} \/&gt;\r\n      &lt;Route path=\"\/goodbye\" element={&lt;Goodbye \/&gt;} \/&gt;\r\n    &lt;\/Routes&gt;\r\n  &lt;\/Router&gt;\r\n);\r\n\r\nexport default App;\r\n<\/code><\/pre>\r\n\r\n<h3>React Router &ldquo;useNavigate&rdquo; hook<\/h3>\r\n\r\n<p>Introduced in React Router&nbsp;<code>6.0.0<\/code>, the&nbsp;<a href=\"https:\/\/reactrouter.com\/en\/main\/hooks\/use-navigate\">useNavigate<\/a>&nbsp;hook is considered the new and future-facing direction for routing in React. It&nbsp;<a href=\"https:\/\/www.npmjs.com\/package\/react-router-dom?activeTab=dependencies\">has a dependency<\/a>&nbsp;on&nbsp;<a href=\"https:\/\/github.com\/remix-run\/react-router\">Remix Router<\/a>&nbsp;and the core&nbsp;<a href=\"https:\/\/www.npmjs.com\/package\/react-router\">React Router<\/a>.<\/p>\r\n\r\n<p>Inside our&nbsp;<code>Hello<\/code>&nbsp;component, we&rsquo;ll import the&nbsp;<code>useNavigate<\/code>&nbsp;hook from React Router and call it at the top of the functional component.<\/p>\r\n\r\n<p>Then, create a handler like&nbsp;<code>handleClick<\/code>&nbsp;and assign it via an&nbsp;<code>onClick<\/code>&nbsp;handler:<\/p>\r\n\r\n<pre>\r\n<code>import * as React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Hello = () =&gt; {\r\n  const navigate = useNavigate();\r\n  const handleClick = () =&gt; navigate('\/goodbye');\r\n\r\n  return (\r\n    &lt;button type=\"button\" onClick={handleClick}&gt;\r\n      Goodbye\r\n    &lt;\/button&gt;\r\n  );\r\n};\r\n\r\nexport default Hello;\r\n<\/code><\/pre>\r\n\r\n<p>Clean, right? Now that&nbsp;<code>navigate<\/code>&nbsp;is readily available, we can call the function as many times as we like.<\/p>\r\n\r\n<p>Check out the Stackblitz example below which demonstrates this new hooks approach:<\/p>\r\n\r\n<p>What else does this new&nbsp;<code>useNavigate<\/code>&nbsp;hook give us then? Deltas.<\/p>\r\n\r\n<p>Delta? That&rsquo;s essentially a&nbsp;<code>number<\/code>, much like the traditional&nbsp;<code>history<\/code>&nbsp;API to navigate&nbsp;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/History\/go\">back and forth<\/a>&nbsp;using the&nbsp;<code>go()<\/code>&nbsp;method.<\/p>\r\n\r\n<p>To go back, like the browser&rsquo;s &ldquo;Back&rdquo; button, simply pass&nbsp;<code>-1<\/code>:<\/p>\r\n\r\n<pre>\r\n<code>const GoBack = () =&gt; {\r\n  const navigate = useNavigate();\r\n  const handleClick = () =&gt; navigate(-1);\r\n\r\n  return (\r\n    &lt;button type=\"button\" onClick={handleClick}&gt;\r\n      Go Back \u23EA\r\n    &lt;\/button&gt;\r\n  );\r\n};\r\n<\/code><\/pre>\r\n\r\n<p>To go forward, like the browser&rsquo;s &ldquo;Forward&rdquo; button, simply pass&nbsp;<code>1<\/code>:<\/p>\r\n\r\n<pre>\r\n<code>const GoForward = () =&gt; {\r\n  const navigate = useNavigate();\r\n  const handleClick = () =&gt; navigate(1);\r\n\r\n  return (\r\n    &lt;button type=\"button\" onClick={handleClick}&gt;\r\n      Go Forward \u23E9\r\n    &lt;\/button&gt;\r\n  );\r\n};\r\n<\/code><\/pre>\r\n\r\n<p>This behavior is perfect for when dealing with dynamic URLs where you might not have the previous router state available, so it keeps things light and dynamic.<\/p>\r\n\r\n<h3>Bonus: TypeScript Interface<\/h3>\r\n\r\n<p>This is why I also like TypeScript, because even if you aren&rsquo;t using it - it&rsquo;s a clear descriptor of the API. Why am I telling you this? Because here&rsquo;s the TypeScript&nbsp;<code>interface<\/code>:<\/p>\r\n\r\n<pre>\r\n<code>declare function useNavigate(): NavigateFunction;\r\n\r\ninterface NavigateFunction {\r\n  (\r\n    to: To,\r\n    options?: {\r\n      replace?: boolean;\r\n      state?: any;\r\n      relative?: RelativeRoutingType;\r\n    }\r\n  ): void;\r\n  (delta: number): void;\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>This tells us that we can also pass a second argument into&nbsp;<code>navigate()<\/code>&nbsp;which is an object of&nbsp;<code>options<\/code>. For example,&nbsp;<code>replace<\/code>&nbsp;will (as the name suggests) replace the current routing state in the history instead of creating a new item in the stack - and&nbsp;<code>state<\/code>&nbsp;for any state you wish to pass to another router.<\/p>\r\n\r\n<h3>Legacy: React Router v5 and useHistory<\/h3>\r\n\r\n<p>Before the&nbsp;<code>useNavigate<\/code>&nbsp;hook, version&nbsp;<code>5.0.0<\/code>&nbsp;of React Router shipped with a very similar method called&nbsp;<code>useHistory<\/code>. Here&rsquo;s how that looked if you&rsquo;re after version 5:<\/p>\r\n\r\n<pre>\r\n<code>import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Hello = () =&gt; {\r\n  const history = useHistory();\r\n  const handleClick = () =&gt; history.push('\/goodbye');\r\n\r\n  return (\r\n    &lt;button type=\"button\" onClick={handleClick}&gt;\r\n      Goodbye\r\n    &lt;\/button&gt;\r\n  );\r\n};\r\n\r\nexport default Hello;\r\n<\/code><\/pre>\r\n\r\n<p>Even though the API is very similar, the&nbsp;<code>useNavigate<\/code>&nbsp;hook is a nice improvement over the traditional-looking&nbsp;<code>history<\/code>&nbsp;API that the&nbsp;<code>useHistory<\/code>&nbsp;hook exposed.<\/p>\r\n\r\n<h3>Summary<\/h3>\r\n\r\n<p>We&rsquo;ve covered a lot of ground here for something so simple, but I feel we&rsquo;ve effectively explored our options. To recap:<\/p>\r\n\r\n<ul>\r\n\t<li>Use the&nbsp;<code>useNavigate<\/code>&nbsp;hook for new projects<\/li>\r\n\t<li>Supply a URL path into your hook, or delta (number) to mimic browser back\/forward buttons<\/li>\r\n\t<li>You&rsquo;ve seen how to refactor your&nbsp;<code>useHistory<\/code>&nbsp;hook to the new React Router v6&nbsp;<code>useNavigate<\/code>&nbsp;hook<\/li>\r\n<\/ul>\r\n\r\n<blockquote>\r\n<p>Enjoyed the post? There&rsquo;s lots more in my expert&nbsp;<a href=\"https:\/\/ultimatecourses.com\/courses\/react\">React courses<\/a>&nbsp;where you&rsquo;ll learn everything you need to know to be extremely good and proficient at React and the surrounding ecosystem, hooks and beyond!<\/p>\r\n<\/blockquote>\r\n\r\n<p>Happy routing!<\/p>\r\n\r\n<blockquote>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n",
    "slug":"how-to-learn-reactjs",
    "metadesc":"React (also known as React.js or ReactJS) is a free and open-source front-end JavaScript library[3] for building user interfaces based on UI components. It is maintained by Meta (formerly Facebook) and a community of individual developers and companies.[4][5][6] React can be used as a base in the development of single-page, mobile, or server-rendered applications with frameworks like Next.js. However, React is only concerned with state management and rendering that state to the DOM, so creating React applications usually requires the use of additional libraries for routing, as well as certain client-side functionality."
}