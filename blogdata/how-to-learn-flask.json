{
    "title":"How-to-Learn-Flask",
    "author":"Faizan Malik",
    "content":"<h1>Blog Blueprint<\/h1>\r\n\r\n<p>You&rsquo;ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.<\/p>\r\n\r\n<p>As you implement each view, keep the development server running. As you save your changes, try going to the URL in your browser and testing them out.<\/p>\r\n\r\n<h2>The Blueprint<\/h2>\r\n\r\n<p>Define the blueprint and register it in the application factory.<\/p>\r\n\r\n<p><code>flaskr\/blog.py<\/code><\/p>\r\n\r\n<pre>\r\nfrom flask import (\r\n    Blueprint, flash, g, redirect, render_template, request, url_for\r\n)\r\nfrom werkzeug.exceptions import abort\r\n\r\nfrom flaskr.auth import login_required\r\nfrom flaskr.db import get_db\r\n\r\nbp = Blueprint(&#39;blog&#39;, __name__)\r\n<\/pre>\r\n\r\n<p>Import and register the blueprint from the factory using&nbsp;<a href=\"https:\/\/flask.palletsprojects.com\/en\/2.2.x\/api\/#flask.Flask.register_blueprint\" title=\"flask.Flask.register_blueprint\"><code>app.register_blueprint()<\/code><\/a>. Place the new code at the end of the factory function before returning the app.<\/p>\r\n\r\n<p><code>flaskr\/__init__.py<\/code><\/p>\r\n\r\n<pre>\r\ndef create_app():\r\n    app = ...\r\n    # existing code omitted\r\n\r\n    from . import blog\r\n    app.register_blueprint(blog.bp)\r\n    app.add_url_rule(&#39;\/&#39;, endpoint=&#39;index&#39;)\r\n\r\n    return app\r\n<\/pre>\r\n\r\n<p>Unlike the auth blueprint, the blog blueprint does not have a&nbsp;<code>url_prefix<\/code>. So the&nbsp;<code>index<\/code>&nbsp;view will be at&nbsp;<code>\/<\/code>, the&nbsp;<code>create<\/code>&nbsp;view at&nbsp;<code>\/create<\/code>, and so on. The blog is the main feature of Flaskr, so it makes sense that the blog index will be the main index.<\/p>\r\n\r\n<p>However, the endpoint for the&nbsp;<code>index<\/code>&nbsp;view defined below will be&nbsp;<code>blog.index<\/code>. Some of the authentication views referred to a plain&nbsp;<code>index<\/code>&nbsp;endpoint.&nbsp;<a href=\"https:\/\/flask.palletsprojects.com\/en\/2.2.x\/api\/#flask.Flask.add_url_rule\" title=\"flask.Flask.add_url_rule\"><code>app.add_url_rule()<\/code><\/a>&nbsp;associates the endpoint name&nbsp;<code>&#39;index&#39;<\/code>&nbsp;with the&nbsp;<code>\/<\/code>&nbsp;url so that&nbsp;<code>url_for(&#39;index&#39;)<\/code>&nbsp;or&nbsp;<code>url_for(&#39;blog.index&#39;)<\/code>&nbsp;will both work, generating the same&nbsp;<code>\/<\/code>&nbsp;URL either way.<\/p>\r\n\r\n<p>In another application you might give the blog blueprint a&nbsp;<code>url_prefix<\/code>&nbsp;and define a separate&nbsp;<code>index<\/code>&nbsp;view in the application factory, similar to the&nbsp;<code>hello<\/code>&nbsp;view. Then the&nbsp;<code>index<\/code>&nbsp;and&nbsp;<code>blog.index<\/code>&nbsp;endpoints and URLs would be different.<\/p>\r\n\r\n<h2>Index<\/h2>\r\n\r\n<p>The index will show all of the posts, most recent first. A&nbsp;<code>JOIN<\/code>&nbsp;is used so that the author information from the&nbsp;<code>user<\/code>&nbsp;table is available in the result.<\/p>\r\n\r\n<p><code>flaskr\/blog.py<\/code><\/p>\r\n\r\n<pre>\r\n@bp.route(&#39;\/&#39;)\r\ndef index():\r\n    db = get_db()\r\n    posts = db.execute(\r\n        &#39;SELECT p.id, title, body, created, author_id, username&#39;\r\n        &#39; FROM post p JOIN user u ON p.author_id = u.id&#39;\r\n        &#39; ORDER BY created DESC&#39;\r\n    ).fetchall()\r\n    return render_template(&#39;blog\/index.html&#39;, posts=posts)\r\n<\/pre>\r\n\r\n<p><code>flaskr\/templates\/blog\/index.html<\/code><\/p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block header %}\r\n  &lt;h1&gt;{% block title %}Posts{% endblock %}&lt;\/h1&gt;\r\n  {% if g.user %}\r\n    &lt;a class=&quot;action&quot; href=&quot;{{ url_for(&#39;blog.create&#39;) }}&quot;&gt;New&lt;\/a&gt;\r\n  {% endif %}\r\n{% endblock %}\r\n\r\n{% block content %}\r\n  {% for post in posts %}\r\n    &lt;article class=&quot;post&quot;&gt;\r\n      &lt;header&gt;\r\n        &lt;div&gt;\r\n          &lt;h1&gt;{{ post[&#39;title&#39;] }}&lt;\/h1&gt;\r\n          &lt;div class=&quot;about&quot;&gt;by {{ post[&#39;username&#39;] }} on {{ post[&#39;created&#39;].strftime(&#39;%Y-%m-%d&#39;) }}&lt;\/div&gt;\r\n        &lt;\/div&gt;\r\n        {% if g.user[&#39;id&#39;] == post[&#39;author_id&#39;] %}\r\n          &lt;a class=&quot;action&quot; href=&quot;{{ url_for(&#39;blog.update&#39;, id=post[&#39;id&#39;]) }}&quot;&gt;Edit&lt;\/a&gt;\r\n        {% endif %}\r\n      &lt;\/header&gt;\r\n      &lt;p class=&quot;body&quot;&gt;{{ post[&#39;body&#39;] }}&lt;\/p&gt;\r\n    &lt;\/article&gt;\r\n    {% if not loop.last %}\r\n      &lt;hr&gt;\r\n    {% endif %}\r\n  {% endfor %}\r\n{% endblock %}\r\n<\/pre>\r\n\r\n<p>When a user is logged in, the&nbsp;<code>header<\/code>&nbsp;block adds a link to the&nbsp;<code>create<\/code>&nbsp;view. When the user is the author of a post, they&rsquo;ll see an &ldquo;Edit&rdquo; link to the&nbsp;<code>update<\/code>&nbsp;view for that post.&nbsp;<code>loop.last<\/code>&nbsp;is a special variable available inside&nbsp;<a href=\"https:\/\/jinja.palletsprojects.com\/templates\/#for\">Jinja for loops<\/a>. It&rsquo;s used to display a line after each post except the last one, to visually separate them.<\/p>\r\n\r\n<h2>Create<\/h2>\r\n\r\n<p>The&nbsp;<code>create<\/code>&nbsp;view works the same as the auth&nbsp;<code>register<\/code>&nbsp;view. Either the form is displayed, or the posted data is validated and the post is added to the database or an error is shown.<\/p>\r\n\r\n<p>The&nbsp;<code>login_required<\/code>&nbsp;decorator you wrote earlier is used on the blog views. A user must be logged in to visit these views, otherwise they will be redirected to the login page.<\/p>\r\n\r\n<p><code>flaskr\/blog.py<\/code><\/p>\r\n\r\n<pre>\r\n@bp.route(&#39;\/create&#39;, methods=(&#39;GET&#39;, &#39;POST&#39;))\r\n@login_required\r\ndef create():\r\n    if request.method == &#39;POST&#39;:\r\n        title = request.form[&#39;title&#39;]\r\n        body = request.form[&#39;body&#39;]\r\n        error = None\r\n\r\n        if not title:\r\n            error = &#39;Title is required.&#39;\r\n\r\n        if error is not None:\r\n            flash(error)\r\n        else:\r\n            db = get_db()\r\n            db.execute(\r\n                &#39;INSERT INTO post (title, body, author_id)&#39;\r\n                &#39; VALUES (?, ?, ?)&#39;,\r\n                (title, body, g.user[&#39;id&#39;])\r\n            )\r\n            db.commit()\r\n            return redirect(url_for(&#39;blog.index&#39;))\r\n\r\n    return render_template(&#39;blog\/create.html&#39;)\r\n<\/pre>\r\n\r\n<p><code>flaskr\/templates\/blog\/create.html<\/code><\/p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block header %}\r\n  &lt;h1&gt;{% block title %}New Post{% endblock %}&lt;\/h1&gt;\r\n{% endblock %}\r\n\r\n{% block content %}\r\n  &lt;form method=&quot;post&quot;&gt;\r\n    &lt;label for=&quot;title&quot;&gt;Title&lt;\/label&gt;\r\n    &lt;input name=&quot;title&quot; id=&quot;title&quot; value=&quot;{{ request.form[&#39;title&#39;] }}&quot; required&gt;\r\n    &lt;label for=&quot;body&quot;&gt;Body&lt;\/label&gt;\r\n    &lt;textarea name=&quot;body&quot; id=&quot;body&quot;&gt;{{ request.form[&#39;body&#39;] }}&lt;\/textarea&gt;\r\n    &lt;input type=&quot;submit&quot; value=&quot;Save&quot;&gt;\r\n  &lt;\/form&gt;\r\n{% endblock %}\r\n<\/pre>\r\n\r\n<h2>Update<\/h2>\r\n\r\n<p>Both the&nbsp;<code>update<\/code>&nbsp;and&nbsp;<code>delete<\/code>&nbsp;views will need to fetch a&nbsp;<code>post<\/code>&nbsp;by&nbsp;<code>id<\/code>&nbsp;and check if the author matches the logged in user. To avoid duplicating code, you can write a function to get the&nbsp;<code>post<\/code>&nbsp;and call it from each view.<\/p>\r\n\r\n<p><code>flaskr\/blog.py<\/code><\/p>\r\n\r\n<pre>\r\ndef get_post(id, check_author=True):\r\n    post = get_db().execute(\r\n        &#39;SELECT p.id, title, body, created, author_id, username&#39;\r\n        &#39; FROM post p JOIN user u ON p.author_id = u.id&#39;\r\n        &#39; WHERE p.id = ?&#39;,\r\n        (id,)\r\n    ).fetchone()\r\n\r\n    if post is None:\r\n        abort(404, f&quot;Post id {id} doesn&#39;t exist.&quot;)\r\n\r\n    if check_author and post[&#39;author_id&#39;] != g.user[&#39;id&#39;]:\r\n        abort(403)\r\n\r\n    return post\r\n<\/pre>\r\n\r\n<p><a href=\"https:\/\/flask.palletsprojects.com\/en\/2.2.x\/api\/#flask.abort\" title=\"flask.abort\"><code>abort()<\/code><\/a>&nbsp;will raise a special exception that returns an HTTP status code. It takes an optional message to show with the error, otherwise a default message is used.&nbsp;<code>404<\/code>&nbsp;means &ldquo;Not Found&rdquo;, and&nbsp;<code>403<\/code>&nbsp;means &ldquo;Forbidden&rdquo;. (<code>401<\/code>&nbsp;means &ldquo;Unauthorized&rdquo;, but you redirect to the login page instead of returning that status.)<\/p>\r\n\r\n<p>The&nbsp;<code>check_author<\/code>&nbsp;argument is defined so that the function can be used to get a&nbsp;<code>post<\/code>&nbsp;without checking the author. This would be useful if you wrote a view to show an individual post on a page, where the user doesn&rsquo;t matter because they&rsquo;re not modifying the post.<\/p>\r\n\r\n<p><code>flaskr\/blog.py<\/code><\/p>\r\n\r\n<pre>\r\n@bp.route(&#39;\/&lt;int:id&gt;\/update&#39;, methods=(&#39;GET&#39;, &#39;POST&#39;))\r\n@login_required\r\ndef update(id):\r\n    post = get_post(id)\r\n\r\n    if request.method == &#39;POST&#39;:\r\n        title = request.form[&#39;title&#39;]\r\n        body = request.form[&#39;body&#39;]\r\n        error = None\r\n\r\n        if not title:\r\n            error = &#39;Title is required.&#39;\r\n\r\n        if error is not None:\r\n            flash(error)\r\n        else:\r\n            db = get_db()\r\n            db.execute(\r\n                &#39;UPDATE post SET title = ?, body = ?&#39;\r\n                &#39; WHERE id = ?&#39;,\r\n                (title, body, id)\r\n            )\r\n            db.commit()\r\n            return redirect(url_for(&#39;blog.index&#39;))\r\n\r\n    return render_template(&#39;blog\/update.html&#39;, post=post)\r\n<\/pre>\r\n\r\n<p>Unlike the views you&rsquo;ve written so far, the&nbsp;<code>update<\/code>&nbsp;function takes an argument,&nbsp;<code>id<\/code>. That corresponds to the&nbsp;<code>&lt;int:id&gt;<\/code>&nbsp;in the route. A real URL will look like&nbsp;<code>\/1\/update<\/code>. Flask will capture the&nbsp;<code>1<\/code>, ensure it&rsquo;s an&nbsp;<a href=\"https:\/\/docs.python.org\/3\/library\/functions.html#int\" title=\"(in Python v3.11)\"><code>int<\/code><\/a>, and pass it as the&nbsp;<code>id<\/code>&nbsp;argument. If you don&rsquo;t specify&nbsp;<code>int:<\/code>&nbsp;and instead do&nbsp;<code>&lt;id&gt;<\/code>, it will be a string. To generate a URL to the update page,&nbsp;<a href=\"https:\/\/flask.palletsprojects.com\/en\/2.2.x\/api\/#flask.url_for\" title=\"flask.url_for\"><code>url_for()<\/code><\/a>&nbsp;needs to be passed the&nbsp;<code>id<\/code>&nbsp;so it knows what to fill in:&nbsp;<code>url_for(&#39;blog.update&#39;,&nbsp;id=post[&#39;id&#39;])<\/code>. This is also in the&nbsp;<code>index.html<\/code>&nbsp;file above.<\/p>\r\n\r\n<p>The&nbsp;<code>create<\/code>&nbsp;and&nbsp;<code>update<\/code>&nbsp;views look very similar. The main difference is that the&nbsp;<code>update<\/code>&nbsp;view uses a&nbsp;<code>post<\/code>&nbsp;object and an&nbsp;<code>UPDATE<\/code>&nbsp;query instead of an&nbsp;<code>INSERT<\/code>. With some clever refactoring, you could use one view and template for both actions, but for the tutorial it&rsquo;s clearer to keep them separate.<\/p>\r\n\r\n<p><code>flaskr\/templates\/blog\/update.html<\/code><\/p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block header %}\r\n  &lt;h1&gt;{% block title %}Edit &quot;{{ post[&#39;title&#39;] }}&quot;{% endblock %}&lt;\/h1&gt;\r\n{% endblock %}\r\n\r\n{% block content %}\r\n  &lt;form method=&quot;post&quot;&gt;\r\n    &lt;label for=&quot;title&quot;&gt;Title&lt;\/label&gt;\r\n    &lt;input name=&quot;title&quot; id=&quot;title&quot;\r\n      value=&quot;{{ request.form[&#39;title&#39;] or post[&#39;title&#39;] }}&quot; required&gt;\r\n    &lt;label for=&quot;body&quot;&gt;Body&lt;\/label&gt;\r\n    &lt;textarea name=&quot;body&quot; id=&quot;body&quot;&gt;{{ request.form[&#39;body&#39;] or post[&#39;body&#39;] }}&lt;\/textarea&gt;\r\n    &lt;input type=&quot;submit&quot; value=&quot;Save&quot;&gt;\r\n  &lt;\/form&gt;\r\n  &lt;hr&gt;\r\n  &lt;form action=&quot;{{ url_for(&#39;blog.delete&#39;, id=post[&#39;id&#39;]) }}&quot; method=&quot;post&quot;&gt;\r\n    &lt;input class=&quot;danger&quot; type=&quot;submit&quot; value=&quot;Delete&quot; onclick=&quot;return confirm(&#39;Are you sure?&#39;);&quot;&gt;\r\n  &lt;\/form&gt;\r\n{% endblock %}\r\n<\/pre>\r\n\r\n<p>This template has two forms. The first posts the edited data to the current page (<code>\/&lt;id&gt;\/update<\/code>). The other form contains only a button and specifies an&nbsp;<code>action<\/code>&nbsp;attribute that posts to the delete view instead. The button uses some JavaScript to show a confirmation dialog before submitting.<\/p>\r\n\r\n<p>The pattern&nbsp;<code>{{&nbsp;request.form[&#39;title&#39;]&nbsp;or&nbsp;post[&#39;title&#39;]&nbsp;}}<\/code>&nbsp;is used to choose what data appears in the form. When the form hasn&rsquo;t been submitted, the original&nbsp;<code>post<\/code>&nbsp;data appears, but if invalid form data was posted you want to display that so the user can fix the error, so&nbsp;<code>request.form<\/code>&nbsp;is used instead.&nbsp;<a href=\"https:\/\/flask.palletsprojects.com\/en\/2.2.x\/api\/#flask.request\" title=\"flask.request\"><code>request<\/code><\/a>&nbsp;is another variable that&rsquo;s automatically available in templates.<\/p>\r\n\r\n<h2>Delete<\/h2>\r\n\r\n<p>The delete view doesn&rsquo;t have its own template, the delete button is part of&nbsp;<code>update.html<\/code>&nbsp;and posts to the&nbsp;<code>\/&lt;id&gt;\/delete<\/code>&nbsp;URL. Since there is no template, it will only handle the&nbsp;<code>POST<\/code>&nbsp;method and then redirect to the&nbsp;<code>index<\/code>&nbsp;view.<\/p>\r\n\r\n<p><code>flaskr\/blog.py<\/code><\/p>\r\n\r\n<pre>\r\n@bp.route(&#39;\/&lt;int:id&gt;\/delete&#39;, methods=(&#39;POST&#39;,))\r\n@login_required\r\ndef delete(id):\r\n    get_post(id)\r\n    db = get_db()\r\n    db.execute(&#39;DELETE FROM post WHERE id = ?&#39;, (id,))\r\n    db.commit()\r\n    return redirect(url_for(&#39;blog.index&#39;))\r\n<\/pre>\r\n\r\n<p>Congratulations, you&rsquo;ve now finished writing your application! Take some time to try out everything in the browser. However, there&rsquo;s still more to do before the project is complete.<\/p>\r\n\r\n<p>Continue to&nbsp;<a href=\"https:\/\/flask.palletsprojects.com\/en\/2.2.x\/tutorial\/install\/\">Make the Project Installable<\/a><\/p>\r\n\r\n<blockquote>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n",
    "slug":"how-to-learn-flask"

}