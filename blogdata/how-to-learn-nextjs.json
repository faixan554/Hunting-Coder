{
    "title":"How-to-Learn-Next JS",
    "author":"Faizan Malik",
    "content": "<p>Next.js may be the best React framework for building your blog. Among the benefits are performance, bundle size and SEO. Let&rsquo;s build one!<\/p>\r\n\r\n<p><a href=\"https:\/\/nextjs.org\/\">Next.js<\/a>&nbsp;has become one of the most important frameworks for React applications. It helps developers to build better server-side rendering React applications without boilerplate.<\/p>\r\n\r\n<p>There are many features in Next.js that make it one of the best React frameworks out there&mdash;a rich developer experience, smart bundling, route pre-fetching, TypeScript support, SEO, etc.<\/p>\r\n\r\n<p>Creating a blog using Next.js is the best option today for those who want to have a simple but powerful blog&mdash;without ending up with a lot of code and while increasing our SEO ranking.<\/p>\r\n\r\n<p><a href=\"https:\/\/moz.com\/learn\/seo\/what-is-seo\">SEO<\/a>&nbsp;(search engine optimization) is the process of improving your application to rank better on search engines. It is very important for any blog that wants to rank better on search engines and bring in more traffic. A good application with a bad SEO ranking will not be productive, effective or successful.<\/p>\r\n\r\n<p>We are going to use Next.js in this article to build a static-generated and production-ready blog. We will walk through how&nbsp;<a href=\"https:\/\/nextjs.org\/docs\/basic-features\/pages#static-generation-recommended\">SSG (static site generation)<\/a>&nbsp;works and end up with a very good blog with an effective SEO.<\/p>\r\n\r\n<h2>Getting Started<\/h2>\r\n\r\n<p>We are going to create a new Next.js application using the Create Next App CLI tool. It helps us to easily get started with Next.js and create a new application. To get started, we are going to use the following command:<\/p>\r\n\r\n<pre>\r\n<code>npx create-next-app blog-with-next-js --example --with-typescript\r\n<\/code><\/pre>\r\n\r\n<p>We used the&nbsp;<code>--example<\/code>&nbsp;option for creating a new Next.js application using the example name for the Next.js repository. We used the&nbsp;<code>--with-typescript<\/code>&nbsp;option for creating a new Next.js application with TypeScript.<\/p>\r\n\r\n<p>Now that we have our new Next.js application, we are going to create our folder structure.<\/p>\r\n\r\n<p>This is how our folder structure is going to look:<\/p>\r\n\r\n<pre>\r\n<code>-- src\r\n  -- pages\r\n  -- components\r\n  -- articles\r\n  -- lib\r\n<\/code><\/pre>\r\n\r\n<p>We are going to remove all folders that come from the Create Next App CLI and create a new folder called&nbsp;<code>src<\/code>. Inside the&nbsp;<code>src<\/code>&nbsp;folder, we are going to create all the folders that we are going to need to create our blog.<\/p>\r\n\r\n<p>Now, we are going to install all the dependencies that we are going to need.<\/p>\r\n\r\n<pre>\r\n<code>yarn add @emotion\/styled @next\/mdx date-fns gray-matter mdx-prism next-mdx-remote next-seo reading-time rehype remark-autolink-headings remark-capitalize remark-code-titles remark-external-links remark-images remark-slug\r\n<\/code><\/pre>\r\n\r\n<h2>Creating Our Files<\/h2>\r\n\r\n<p>After we install all of our dependencies, we are going to our pages folder and create a new file called&nbsp;<code>_app.tsx<\/code>.<\/p>\r\n\r\n<p>This is how our&nbsp;<code>_app.tsx<\/code>&nbsp;file is going to look:<\/p>\r\n\r\n<pre>\r\n<code>function MyApp({ Component, pageProps }: any) {\r\n  return &lt;Component {...pageProps} \/&gt;;\r\n}\r\n\r\nexport default MyApp\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>Now, inside our&nbsp;<code>articles<\/code>&nbsp;folder, we are going to create a new file called&nbsp;<code>introducing-blog-with-nextjs.mdx<\/code>. All the blog posts of our blog will be written using Markdown and should have some content outlined by&nbsp;<code>--<\/code>&nbsp;which is known as front matter. The front matter holds all the information of our blog post.<\/p>\r\n\r\n<p>This is how our first blog post is going to look:<\/p>\r\n\r\n<pre>\r\n<code>---\r\ntitle: \"Introducing Blog with Next.js\"\r\ndescription: \"A new blog using Next.js and Markdown\"\r\ndate: \"14 Apr, 2021\"\r\nslug: \"introducing-blog-with-nextjs\"\r\nogImage:\r\n  url: \"\/images\/articles\/introducing-blog-with-nextjs.jpeg\"\r\n---\r\n\r\nNulla tortor orci, porttitor in pulvinar sit amet, ultricies sit amet sem. Nullam et posuere felis, sit amet convallis urna. Pellentesque vel ipsum dolor.\r\n<\/code><\/pre>\r\n\r\n<p>Now that we have our first blog post written, we are going to our&nbsp;<code>lib<\/code>&nbsp;folder and create some helper functions that we are going to need.<\/p>\r\n\r\n<hr \/>\r\n<h4>Optimizing Build Times in the Jamstack With Netlify&rsquo;s DPR and Next.js<\/h4>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><a href=\"https:\/\/www.telerik.com\/blogs\/optimizing-build-times-jamstack-netlify-dpr-nextjs-game-thrones\" target=\"_blank\">Check out another Next.js blog build<\/a>, this time with Game of Thrones and an exploration of how to reduce build times using Distributed Persistent Rendering, a concept created by the Netlify team.<\/p>\r\n\r\n<hr \/>\r\n<p>We are going to create a file called&nbsp;<code>lib.ts<\/code>&nbsp;and put the following code there:<\/p>\r\n\r\n<pre>\r\n<code>import fs from \"fs\";\r\nimport { join } from \"path\";\r\nimport matter from \"gray-matter\";\r\nimport readingTime from \"reading-time\";\r\nimport { API, BlogArticleType } from \"src\/types\";\r\n\r\nconst articlesDirectory = join(process.cwd(), \"src\/articles\");\r\n\r\nfunction getRawArticleBySlug(slug: string): matter.GrayMatterFile&lt;string&gt; {\r\n  const fullPath = join(articlesDirectory, `${slug}.mdx`);\r\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n  return matter(fileContents);\r\n}\r\n\r\nfunction getAllSlugs(): Array&lt;string&gt; {\r\n  return fs.readdirSync(articlesDirectory);\r\n}\r\n\r\nfunction getArticleBySlug(\r\n  slug: string,\r\n  fields: string[] = [],\r\n): BlogArticleType {\r\n  const realSlug = slug.replace(\/\\.mdx$\/, \"\");\r\n  const { data, content } = getRawArticleBySlug(realSlug);\r\n  const timeReading: any = readingTime(content);\r\n  const items: BlogArticleType = {};\r\n  \r\n  fields.forEach((field) =&gt; {\r\n    if (field === \"slug\") {\r\n      items[field] = realSlug;\r\n    }\r\n    if (field === \"content\") {\r\n      items[field] = content;\r\n    }\r\n    if (field === \"timeReading\") {\r\n      items[field] = timeReading;\r\n    }\r\n    if (data[field]) {\r\n      items[field] = data[field];\r\n    }\r\n  });\r\n  return items;\r\n}\r\n\r\nfunction getAllArticles(fields: string[] = []): Array&lt;BlogArticleType&gt; {\r\n  return getAllSlugs()\r\n    .map((slug) =&gt; getArticleBySlug(slug, fields))\r\n    .sort((article1, article2) =&gt; (article1.date &gt; article2.date ? -1 : 1));\r\n}\r\n\r\nfunction getArticlesByTag(\r\n  tag: string,\r\n  fields: string[] = [],\r\n): Array&lt;BlogArticleType&gt; {\r\n  return getAllArticles(fields).filter((article) =&gt; {\r\n    const tags = article.tags ?? [];\r\n    return tags.includes(tag);\r\n  });\r\n}\r\n\r\nfunction getAllTags(): Array&lt;string&gt; {\r\n  const articles = getAllArticles([\"tags\"]);\r\n  const allTags = new Set&lt;string&gt;();\r\n  articles.forEach((article) =&gt; {\r\n    const tags = article.tags as Array&lt;string&gt;;\r\n    tags.forEach((tag) =&gt; allTags.add(tag));\r\n  });\r\n  return Array.from(allTags);\r\n}\r\n\r\nexport const api: API = {\r\n  getRawArticleBySlug,\r\n  getAllSlugs,\r\n  getAllArticles,\r\n  getArticlesByTag,\r\n  getArticleBySlug,\r\n  getAllTags,\r\n};\r\n<\/code><\/pre>\r\n\r\n<p>TypeScript<\/p>\r\n\r\n<p>A little bit of explanation of what&rsquo;s happening inside this file and what all functions are doing:<\/p>\r\n\r\n<ul>\r\n\t<li>The function called&nbsp;<code>getRawArticleBySlug<\/code>&nbsp;is responsible for fetching all of our blog posts by slug. It goes to our articles folder and gets all files by slug and returns our data and the content of our blog post.<\/li>\r\n\t<li>The function called&nbsp;<code>getArticleBySlug<\/code>&nbsp;is responsible for receiving a slug and an array of fields as arguments and returning a blog post.<\/li>\r\n\t<li>The function called&nbsp;<code>getAllArticles<\/code>&nbsp;is responsible for fetching all of our blog posts and returning an array of blog posts.<\/li>\r\n<\/ul>\r\n\r\n<p>Inside our&nbsp;<code>src<\/code>&nbsp;folder, we are going to create a&nbsp;<code>types.ts<\/code>&nbsp;file, where we are going to create all of our TypeScript interfaces and types. Inside the file, paste the following code:<\/p>\r\n\r\n<pre>\r\n<code>import matter from \"gray-matter\";\r\n\r\nexport interface AuthorType {\r\n  name: string;\r\n  picture: string;\r\n}\r\n\r\nexport interface ArticleType {\r\n  slug: string;\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n  coverImage: string;\r\n  author: AuthorType;\r\n  excerpt: string;\r\n  timeReading: {\r\n    text: string;\r\n  };\r\n  ogImage: {\r\n    url: string;\r\n  };\r\n  content: string;\r\n}\r\n\r\nexport interface BlogArticleType {\r\n  [key: string]: string | Array&lt;string&gt;;\r\n}\r\n\r\nexport interface API {\r\n  getRawArticleBySlug: (slug: string) =&gt; matter.GrayMatterFile&lt;string&gt;;\r\n  getAllSlugs: () =&gt; Array&lt;string&gt;;\r\n  getAllArticles: (fields: string[]) =&gt; Array&lt;BlogArticleType&gt;;\r\n  getArticlesByTag: (tag: string, fields: string[]) =&gt; Array&lt;BlogArticleType&gt;;\r\n  getArticleBySlug: (slug: string, fields: string[]) =&gt; BlogArticleType;\r\n  getAllTags: () =&gt; Array&lt;string&gt;;\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<h2>Creating Our Components<\/h2>\r\n\r\n<p>Inside our&nbsp;<code>components<\/code>&nbsp;folder, we are going to create two new folders.<\/p>\r\n\r\n<p>We are going to create a folder called&nbsp;<code>ArticleItem<\/code>, which is where we are going to create the component for rendering an article as a preview.<\/p>\r\n\r\n<p>We are going to create a folder called&nbsp;<code>Article<\/code>, where we are going to create our component for rendering a specific article.<\/p>\r\n\r\n<p>We are going to start with our&nbsp;<code>ArticleItem<\/code>&nbsp;folder. Inside the folder, create a file called&nbsp;<code>ArticleItem.tsx<\/code>&nbsp;and a file called&nbsp;<code>ArticleItem.styles.ts<\/code>.<\/p>\r\n\r\n<p>Inside our&nbsp;<code>ArticleItem.styles.ts<\/code>, we are going to create some simple styling for our component using Emotion. Put the following code there:<\/p>\r\n\r\n<pre>\r\n<code>import styled from \"@emotion\/styled\";\r\n\r\nexport const ArticleItemContainer = styled.article`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  height: fit-content;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 250px repeat(auto-fill, max-content);\r\n  grid-row-gap: 20px;\r\n  align-items: center;\r\n\r\n  @media screen and (min-width: 1000px) {\r\n    grid-template-columns: 340px 1fr;\r\n    grid-template-rows: 1fr;\r\n    grid-column-gap: 20px;\r\n    align-items: center;\r\n  }\r\n`;\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>Now, inside our&nbsp;<code>ArticleItem.tsx<\/code>&nbsp;file, we are going to paste the following code:<\/p>\r\n\r\n<pre>\r\n<code>import React from \"react\";\r\nimport NextLink from \"next\/link\";\r\n\r\nimport { ArticleItemContainer } from \".\/ArticleItem.styles\";\r\nimport { ArticleType } from \"src\/types\";\r\n\r\ninterface Props {\r\n  article: ArticleType;\r\n};\r\n\r\nconst ArticleItem = ({ article }: Props) =&gt; (\r\n  &lt;ArticleItemContainer&gt;\r\n    &lt;img\r\n      src={article.ogImage.url}\r\n      alt=\"Image for article\"\r\n      style={{ width: \"100%\", height: 250, borderRadius: 5, objectFit: \"cover\" }}\r\n      lazy=\"loading\"\r\n    \/&gt;\r\n\r\n    &lt;div style={{ display: \"flex\", direction: \"column\", alignItems: \"center\", justifyItems:\"center\" }}&gt;\r\n      &lt;NextLink as={`\/blog\/${article.slug}`} href=\"\/blog\/[slug]\"&gt;\r\n        &lt;a href=\"\/blog\"&gt;\r\n          {article.title}\r\n        &lt;\/a&gt;\r\n      &lt;\/NextLink&gt;\r\n\r\n      &lt;p style={{ color: \"#6F6F6F, fontSize: 16, fontWeight: 300 }}&gt;\r\n        {article.description}\r\n      &lt;\/p&gt;\r\n\r\n      &lt;div style={{ display: \"flex\", direction: \"column\", alignItems: \"center\", justifyItems:\"center\" }}&gt;\r\n        &lt;p style={{ color: \"#6F6F6F, fontSize: 16, fontWeight: 300 }}&gt;\r\n          {article.timeReading.text}\r\n        &lt;\/p&gt;\r\n\r\n        &lt;p style={{ color: \"#6F6F6F, fontSize: 16, fontWeight: 300 }}&gt;\r\n          \u2022\r\n        &lt;\/p&gt;\r\n\r\n        &lt;p style={{ color: \"#6F6F6F, fontSize: 16, fontWeight: 300 }}&gt;\r\n          {article.date}\r\n        &lt;\/p&gt;\r\n      &lt;\/div&gt;\r\n\r\n      &lt;NextLink as={`\/blog\/${article.slug}`} href=\"\/blog\/[slug]\"&gt;\r\n        &lt;a href=\"\/blog\" color=\"#6f6f6f\"&gt;\r\n          Read article\r\n        &lt;\/a&gt;\r\n      &lt;\/NextLink&gt;\r\n    &lt;\/div&gt;\r\n  &lt;\/ArticleItemContainer&gt;\r\n);\r\n\r\nexport default ArticleItem;\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>Next, inside our&nbsp;<code>Article<\/code>&nbsp;folder, we will create a file called&nbsp;<code>Article.tsx<\/code>&nbsp;and two more folders called&nbsp;<code>Header<\/code>&nbsp;and&nbsp;<code>Content<\/code>.<\/p>\r\n\r\n<p>Inside the&nbsp;<code>Header<\/code>&nbsp;folder, we will create a file called&nbsp;<code>Header.tsx<\/code>&nbsp;and paste the following code there:<\/p>\r\n\r\n<pre>\r\n<code>import React from \"react\";\r\n\r\ninterface Props {\r\n  readingTime: {\r\n    text: string;\r\n  };\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n  ogImage: {\r\n    url: string;\r\n  };\r\n}\r\n\r\nconst Header = ({ title, description, date, ogImage }: Props) =&gt; (\r\n  &lt;div style={{ display: \"flex\", direction: \"column\", alignItems: \"center\", justifyItems:\"center\" }}&gt;\r\n    &lt;p style={{ color: \"#6F6F6F\", fontWeight: \"300\", textAlign: \"center\" }}&gt;\r\n      Published on {date}\r\n    &lt;\/p&gt;\r\n\r\n    &lt;h1 style={{ color: \"#101010\", fontWeight: \"600\", textAlign: \"center\" }}&gt;\r\n      {title}\r\n    &lt;\/h1&gt;\r\n\r\n    &lt;p style={{ color: \"#6F6F6F\", fontWeight: \"300\", textAlign: \"center\" }}&gt;\r\n      {description}\r\n    &lt;\/p&gt;\r\n\r\n    &lt;img\r\n      src={ogImage.url}\r\n      alt=\"Post image\"\r\n      style={{ width: \"100%\", height: 400, borderRadius: 5, objectFit: \"cover\" }}\r\n      lazy=\"loading\"\r\n    \/&gt;\r\n  &lt;\/div&gt;\r\n);\r\n\r\nexport default Header;\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>Inside the&nbsp;<code>Content folder<\/code>, we will create a file called&nbsp;<code>Content.tsx<\/code>&nbsp;and paste the following code there:<\/p>\r\n\r\n<pre>\r\n<code>import React from \"react\";\r\n\r\ninterface Props {\r\n  content: React.ReactNode;\r\n};\r\n\r\nconst Content = ({ content }: Props) =&gt; (\r\n  &lt;div style={{ display: \"flex\", direction: \"column\", alignItems: \"center\", justifyItems:\"center\" }}&gt;\r\n    {content}\r\n  &lt;\/div&gt;\r\n);\r\n\r\nexport default Content;\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>Now, inside our&nbsp;<code>Article.tsx<\/code>&nbsp;file, paste the following code:<\/p>\r\n\r\n<pre>\r\n<code>import React from \"react\";\r\nimport Header from \".\/Header\/Header\";\r\nimport Content from \".\/Content\/Content\";\r\n\r\ninterface Props {\r\n  readingTime: {\r\n    text: string;\r\n  };\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n  ogImage: {\r\n    url: string;\r\n  };\r\n  content: React.ReactNode;\r\n  slug: string;\r\n};\r\n\r\nconst Article = ({\r\n  readingTime,\r\n  title,\r\n  description,\r\n  date,\r\n  ogImage,\r\n  content,\r\n}: Props) =&gt; (\r\n  &lt;div style={{ display: \"flex\", direction: \"column\", alignItems: \"center\", justifyItems:\"center\" }}&gt;\r\n    &lt;Header\r\n      readingTime={readingTime}\r\n      title={title}\r\n      description={description}\r\n      date={date}\r\n      ogImage={ogImage}\r\n    \/&gt;\r\n    &lt;Content content={content} \/&gt;\r\n    &lt;hr \/&gt;\r\n  &lt;\/div&gt;\r\n);\r\n\r\nexport default Article;\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<h2>Rendering Our Blog Posts<\/h2>\r\n\r\n<p>Now that we have created our components and the helper functions that we are going to need, we are going to actually create the pages for rendering our blog posts.<\/p>\r\n\r\n<p>Inside our&nbsp;<code>pages<\/code>&nbsp;folder, we are going to have a file called&nbsp;<code>index.tsx<\/code>&nbsp;where we will render all of our blog posts.<\/p>\r\n\r\n<p>Inside the&nbsp;<code>index.tsx<\/code>&nbsp;file we are going to import the&nbsp;<code>ArticleItem<\/code>&nbsp;component that we created. After that, we are going to import the API from our&nbsp;<code>lib.ts<\/code>&nbsp;file to return all of our blog posts.<\/p>\r\n\r\n<pre>\r\n<code>import React from \"react\";\r\nimport ArticleItem from \"src\/components\/ArticleItem\/ArticleItem\";\r\nimport { api } from \"src\/lib\/lib\";\r\nimport { BlogArticleType, ArticleType } from \"src\/types\";\r\n\r\ninterface Props {\r\n  articles: Array&lt;ArticleType&gt;;\r\n};\r\n\r\nconst Index = ({ articles }: Props) =&gt; (\r\n  &lt;div style={{ display: \"flex\", direction: \"column\", alignItems: \"center\", justifyItems:\"center\" }}&gt;\r\n    {articles.map((article: ArticleType) =&gt; (\r\n      &lt;ArticleItem key={article.slug} article={article} \/&gt;\r\n    ))}\r\n  &lt;\/div&gt;\r\n);\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>For each blog post that we have, we&rsquo;re going to render an&nbsp;<code>ArticleItem<\/code>&nbsp;component. We&rsquo;re receiving our articles as a prop but we need to fetch them.<\/p>\r\n\r\n<p>We&rsquo;re going to use the&nbsp;<a href=\"https:\/\/nextjs.org\/docs\/basic-features\/data-fetching#getstaticprops-static-generation\"><code>getStaticProps<\/code><\/a>&nbsp;function from Next.js to fetch all of our blog posts and pass our articles as a prop to our component.<\/p>\r\n\r\n<pre>\r\n<code>export const getStaticProps = async () =&gt; {\r\n  const articles: Array&lt;BlogArticleType&gt; = api.getAllArticles([\r\n    \"slug\",\r\n    \"title\",\r\n    \"description\",\r\n    \"date\",\r\n    \"coverImage\",\r\n    \"excerpt\",\r\n    \"timeReading\",\r\n    \"ogImage\",\r\n    \"content\",\r\n  ]);\r\n  return {\r\n    props: { articles },\r\n  };\r\n};\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>We&rsquo;re now rendering all of our blog posts correctly. Now, inside our&nbsp;<code>pages<\/code>&nbsp;folder, we&rsquo;re going to create a folder called&nbsp;<code>blog<\/code>&nbsp;and inside that folder create a file called&nbsp;<code>[slug].tsx<\/code>.<\/p>\r\n\r\n<p>Inside this file, we&rsquo;re going to render a specific blog post. We&rsquo;re going to import a few dependencies that we&rsquo;re going to need and again the API from our&nbsp;<code>lib.ts<\/code>&nbsp;file.<\/p>\r\n\r\n<pre>\r\n<code>import React from \"react\";\r\nimport readingTime from \"reading-time\";\r\nimport mdxPrism from \"mdx-prism\";\r\nimport renderToString from \"next-mdx-remote\/render-to-string\";\r\nimport hydrate from \"next-mdx-remote\/hydrate\";\r\nimport { NextSeo } from \"next-seo\";\r\n\r\nimport MDXComponents from \"src\/components\/MDXComponents\/MDXComponents\";\r\nimport Article from \"src\/components\/Article\/Article\";\r\nimport { api } from \"src\/lib\/lib\";\r\nimport { BlogArticleType } from \"src\/types\";\r\n\r\ninterface Props {\r\n  readingTime: {\r\n    text: string;\r\n  };\r\n  frontMatter: {\r\n    title: string;\r\n    description: string;\r\n    date: string;\r\n    content: string;\r\n    ogImage: {\r\n      url: string;\r\n    };\r\n  };\r\n  slug: string;\r\n  source: any;\r\n  tags: Array&lt;string&gt;;\r\n};\r\n\r\nconst Index = ({ readingTime, frontMatter, slug, source }: Props) =&gt; {\r\n  const content = hydrate(source);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;NextSeo\r\n        title={frontMatter.title}\r\n        description={frontMatter.description}\r\n      \/&gt;\r\n      &lt;Article\r\n        readingTime={readingTime}\r\n        title={frontMatter.title}\r\n        description={frontMatter.description}\r\n        date={frontMatter.date}\r\n        content={content}\r\n        ogImage={frontMatter.ogImage}\r\n        slug={slug}\r\n      \/&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n};\r\n<\/code><\/pre>\r\n\r\n<p>JavaScript<\/p>\r\n\r\n<p>We&rsquo;re going to use the&nbsp;<a href=\"https:\/\/nextjs.org\/docs\/basic-features\/data-fetching#getstaticpaths-static-generation\"><code>getStaticPaths<\/code><\/a>&nbsp;from Next.js and pass a list of paths that have to be pre-rendered at build time. We&rsquo;re also going to use the&nbsp;<code>renderToString<\/code>&nbsp;function from next-mdx-remote to turn our content into a string and use some plugins for our Markdown text.<\/p>\r\n\r\n<pre>\r\n<code>type Params = {\r\n  params: {\r\n    slug: string;\r\n    timeReading: {\r\n      text: string;\r\n    };\r\n  };\r\n};\r\n\r\nexport async function getStaticProps({ params }: Params) {\r\n  const { content, data } = api.getRawArticleBySlug(params.slug);\r\n  const mdxSource = await renderToString(content, {\r\n    components: MDXComponents,\r\n    mdxOptions: {\r\n      remarkPlugins: [\r\n        require(\"remark-autolink-headings\"),\r\n        require(\"remark-slug\"),\r\n        require(\"remark-code-titles\"),\r\n        require(\"remark-autolink-headings\"),\r\n        require(\"remark-capitalize\"),\r\n        require(\"remark-code-titles\"),\r\n        require(\"remark-external-links\"),\r\n        require(\"remark-images\"),\r\n        require(\"remark-slug\"),\r\n      ],\r\n      rehypePlugins: [mdxPrism],\r\n    },\r\n  });\r\n  const tags = data.tags ?? [];\r\n  return {\r\n    props: {\r\n      slug: params.slug,\r\n      readingTime: readingTime(content),\r\n      source: mdxSource,\r\n      frontMatter: data,\r\n      tags,\r\n    },\r\n  };\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const articles: Array&lt;BlogArticleType&gt; = api.getAllArticles([\"slug\"]);\r\n  return {\r\n    paths: articles.map((articles) =&gt; {\r\n      return {\r\n        params: {\r\n          slug: articles.slug,\r\n        },\r\n      };\r\n    }),\r\n    fallback: false,\r\n  };\r\n};\r\n<\/code><\/pre>\r\n\r\n<p>TypeScript<\/p>\r\n\r\n<p>We now have a fully production-ready and statically generated blog using Next.js.<\/p>\r\n\r\n<h2>Conclusion<\/h2>\r\n\r\n<p>Creating a blog using Next.js is very easy and straightforward. The benefits of Next.js, especially for blogs, are huge. Your blog application will have a very good performance, a small bundle and a good SEO score.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<blockquote>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n",
    "slug":"how-to-learn-nextjs",
    "metadesc":"Next.js is an open-source web development framework created by Vercel enabling React-based web applications with server-side rendering and generating static websites. React documentation mentions Next.js among advising it to developers as a solution when Building a server-rendered website with Node.js.[4] Where traditional React apps can only render their content in the client-side browser, Next.js extends this functionality to include applications rendered on the server-side."
}